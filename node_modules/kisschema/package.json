{
  "name": "kisschema",
  "version": "0.0.1",
  "description": "ReactJS propType-inspired schemas for plain old JS objects.",
  "main": "build/index.js",
  "scripts": {
    "develop": "babel --watch src --out-file build/index.js",
    "test": "mocha --watch --compilers js:babel/register"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "mocha": "^2.2.5"
  },
  "readme": "\n##KISSchema\n\nReactJS propType-inspired schemas for plain old JS objects.\n\n###Example:\n```javascript\n\nimport { types, validate } from 'kisschema'\n\nvar emailType = types.custom({ \n  validate: (str) => /.@./.test(str),\n  makeErrorMessage: (ctx, str) => `Error ${ctx.prop}: '${str}' doesn't really look like an email, dude`\n})\n\nvar userSchema = {\n  name: types.string.isRequired,\n  email: emailType.isRequired,\n  age: types.number,\n  friends: types.arrayOf(userSchema)\n}\n\nvalidate(userSchema, {\n  name: 'Brendan',\n  email: 'brendan@example.com',\n  friends: [ { name: 'Allison', email: 'allison@example.com' } ]\n}) // => passes.. returns null\n\nvalidate(userSchema, {\n  name: 'Brendan',\n  email: 'brendan@example.com',\n  friends: [ { name: 'Allison', email: 'allison@example.com' } ]\n}) // => passes.. returns null\n\nvalidate(userSchema, {\n  name: 'Brendan',\n  email: 'brendan@example.com',\n  friends: [ 1 ]\n}) // => fails.. returns array of error messages about incorrect friends array\n\n```\n\nTypes includes all those present in [React.PropTypes](https://facebook.github.io/react/docs/reusable-components.html#prop-validation), with the exception of React-specific types: node and element.\n\nIn addition, our custom type is a bit more involved, requiring validate and error message functions:\n\n```javascript\nvar shoutType = types.custom({\n  validate: (val) => types.string.validate(val) && /!$/.test(val),\n  makeErrorMessage: (ctx, val) => `Huh, ${ctx.prop} should really have been shouted.`\n})\n```\n\n###API\n\n* types.string\n* types.number\n* types.bool\n* types.func\n* types.array\n* types.object\n* types.oneOf\n* types.oneOfType\n* types.shape\n* types.arrayOf\n* types.objectOf\n\n*any of the above types can be followed with .isRequired*\n\n* validate(schema, obj, opts={})\n  * returns null if passes, or an array of error messages if doesn't pass\n  * ```opts``` can include the following props\n    * ```failFast``` - Stops validating on the first error\n\n",
  "readmeFilename": "README.md",
  "gitHead": "a8a08f101f31fe7ea96a3675a33c4811b041e335",
  "_id": "kisschema@0.0.1",
  "_shasum": "ab347a5e0d569a41c179c122cd6ddc6af3b14d65",
  "_from": "kisschema@*"
}
